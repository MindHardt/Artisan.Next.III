@page "/charsheet"
@using System.Net.Mime
@using Client.Features.Shared.Components
@inject IServiceProvider Services

<PageTitle>Лист персонажа</PageTitle>
<h3>Генератор листов персонажей</h3>

<OpenGraph
    Title="Генератор листов персонажей Аркленс"
    Description="На этой странице вы можете получить pdf файл с листом вашего персонажа"/>

<div class="d-flex flex-md-row flex-column gap-2 mb-3">
    <button class="btn btn-lg btn-primary w-100" disabled="@(_originalSvg is null)" onclick="document.getElementById('characterAvatarUpload').click()">
        <i class="bi bi-upload"></i>
        Аватар
    </button>
    <InputFile hidden accept="image/*" OnChange="@HandleAvatar" id="characterAvatarUpload"/>
    <div class="input-group input-group-lg">
        <span class="input-group-text">Имя файла</span>
        <input type="text" class="form-control" id="charsheetFileNameInput" placeholder="Персонаж"/>
        <button class="btn btn-success" disabled="@(_renderedSvg is null)" onclick="downloadPdf()">
            <i class="bi bi-download"></i>
            <i class="bi bi-filetype-pdf"></i>
        </button>
    </div>
</div>

<script>
    function downloadPdf() {
        const modalElement = document.getElementById('loadingModal');
        const loadingModal = bootstrap.Modal.getOrCreateInstance(modalElement, {
            keyboard: false,
            backdrop: 'static'
        });
        async function execute() {
            const svg = document.querySelector('#charSheetContainer > svg');
            const options = {
                margin: 0,
                filename: document.getElementById('charsheetFileNameInput').value,
                image: {
                    type: 'jpeg', 
                    quality: 1
                },
                jsPDF: {
                    format: 'a4'
                },
                html2canvas: {
                    width: 830
                }
            };
            const worker = html2pdf();
            console.log(worker);
            await worker.set(options).from(svg).save();
            await loadingModal.hide();
            modalElement.removeEventListener('shown.bs.modal', execute);
        }
        
        modalElement.addEventListener('shown.bs.modal', execute);
        loadingModal.show();
    }
</script>

<div class="modal modal-sm fade" id="loadingModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body d-flex justify-content-center vstack text-center">
                <span class="fs-5">Подождите, мы генерируем файл...</span>
                <span class="fs-6">Это не очень быстро</span>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid border rounded-2 d-flex overflow-x-scroll align-content-start justify-content-center flex-row flex-wrap" id="charSheetContainer">
    @if (_renderedSvg is null)
    {
        <PlaceholderText />
    }
    else
    {
        @((MarkupString)_renderedSvg)
    }
</div>

@code {

    private string? _originalSvg;
    private string? _renderedSvg;

    protected override async Task OnInitializedAsync()
    {
        if (BlazorEnv.IsServer)
        {
            return;
        }
        var http = Services.GetRequiredService<HttpClient>();
        _originalSvg = await http.GetStringAsync("svg/charsheet.svg");
        _renderedSvg = _originalSvg;
    }

    private void HandleAvatar(InputFileChangeEventArgs e)
    {
        _renderedSvg = null;
        _ = Task.Run(async () =>
        {
            var convertedImage = await e.File.RequestImageFileAsync(MediaTypeNames.Image.Jpeg, 1000, 1000);

            var imageStream = convertedImage.OpenReadStream(long.MaxValue);
            var destinationStream = new MemoryStream();
            await imageStream.CopyToAsync(destinationStream);
            var imageBase64 = Convert.ToBase64String(destinationStream.ToArray());

            _renderedSvg = _originalSvg!.Replace(OriginalAvatarBase64, imageBase64);
            await InvokeAsync(StateHasChanged);
        });
    }

    private const string OriginalAvatarBase64 =
        "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBmRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAAABAAIAAAExAAIAAAAQAAAATgA" +
        "AAAAAAABgAAAAAQAAAGAAAAABcGFpbnQubmV0IDUuMC45AP/bAEMAAwICAwICAwMDAwQDAwQFCAUFBAQFCgcHBggMCgwMCwoLCw0OEhANDhEOCwsQFhAREx" +
        "QVFRUMDxcYFhQYEhQVFP/bAEMBAwQEBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP/AABEIA" +
        "AEAAQMBEgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGR" +
        "oQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaa" +
        "nqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQ" +
        "ACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZW" +
        "mNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/" +
        "2gAMAwEAAhEDEQA/AP1TooA//9k=";

}