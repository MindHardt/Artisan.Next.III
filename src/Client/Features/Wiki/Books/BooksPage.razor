@page "/wiki/books"
@layout WikiLayout
@using Client.Features.Shared
@using Contracts
@using Microsoft.Extensions.Caching.Memory
@using Client.Features.Shared.Components
@using ErrorOr
@inject PersistentComponentState Persistence
@inject BackendClient Backend
@inject IServiceProvider Services

<PageTitle>Книги</PageTitle>
<OpenGraph Title="Библиотека" Description="Список доступных книг Аркленса"/>

<AuthorizeView Roles="@RoleNames.Admin">
    <NotAuthorized>
        <div class="card mb-3" id="UserCallout">
            <div class="card-header d-flex">
                <i class="bi bi-info-square-fill text-primary flex-fill"></i>
                <button class="btn-close" onclick="document.getElementById('UserCallout').hidden = true"></button>
            </div>
            <div class="card-body">
                Вам доступны для поиска только публичные книги.
                К остальным доступ только по прямой ссылке от администратора.
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
<div class="input-group input-group-lg mb-2">
    <span class="input-group-text bi bi-regex"></span>
    <input class="form-control" type="text" placeholder="[Ии]стория.*" @onchange="@(e => SearchBooks(e.Value as string))" value="@_regex"/>
    <button class="btn btn-@(_isList ? "primary" : "outline-primary")" @onclick="@(() => _isList = true)">
        <i class="bi bi-list-ol"></i>
    </button>
    <button class="btn btn-@(_isList ? "outline-primary" : "primary")" @onclick="@(() => _isList = false)">
        <i class="bi bi-card-text"></i>
    </button>
    <AuthorizeView Roles="@RoleNames.Admin">
        <Authorized>
            <a class="btn btn-outline-success" href="wiki/books/new">
                <i class="bi bi-plus"></i>
            </a>
        </Authorized>
    </AuthorizeView>
</div>

@if (_isList)
{
    <BooksList Books="_books" />
}
else
{
    <BookCards Books="_books" />
}


@code {

    private BookModel[]? _books;
    private string? _regex;

    private bool _isList = false;

    private async Task SearchBooks(string? regex)
    {
        _regex = regex;
        await Backend.Wiki.SearchBooks(new SearchBooks.Request(regex))
            .ThenDo(result => _books = result);
        if (BlazorEnv.IsWasm)
        {
            var cache = Services.GetRequiredService<IMemoryCache>();
            cache.Set(nameof(_books), _books);
            cache.Set(nameof(_regex), _regex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Persistence.TryTakeFromJson(nameof(_books), out _books))
        {
            return;
        }

        if (BlazorEnv.IsWasm)
        {
            var cache = Services.GetRequiredService<IMemoryCache>();
            _books = cache.Get<BookModel[]>(nameof(_books));
            _regex = cache.Get<string>(nameof(_regex));
        }

        if (_books?.Any() is not true)
        {
            await SearchBooks(_regex);
        }
        if (BlazorEnv.IsServer)
        {
            Persistence.RegisterOnPersisting(() =>
            {
                Persistence.PersistAsJson(nameof(_books), _books);
                return Task.CompletedTask;
            });
        }
    }

}