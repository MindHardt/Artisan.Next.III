@page "/wiki/books"
@layout WikiLayout
@using Client.Features.Shared
@using Contracts
@using Microsoft.Extensions.Caching.Memory
@using Client.Features.Shared.Components
@using ErrorOr
@inject PersistentComponentState Persistence
@inject BackendClient Backend
@inject IServiceProvider Services
@inject NavigationManager Navigation

<PageTitle>Книги</PageTitle>
<OpenGraph Title="Библиотека" Description="Список доступных книг Аркленса"/>

<div class="vstack gap-3">
    <AuthorizeView Roles="@RoleNames.Admin">
        <NotAuthorized>
            <div class="card" id="UserCallout">
                <div class="card-header d-flex">
                    <i class="bi bi-info-square-fill text-primary flex-fill"></i>
                    <button class="btn-close" onclick="document.getElementById('UserCallout').hidden = true"></button>
                </div>
                <div class="card-body">
                    Вам доступны для поиска только публичные книги, ваши собственные и книги к которым вы переходили
                    по ссылке-приглашению.
                    К остальным доступ только по прямой ссылке от администратора.
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
    <div class="d-flex flex-column flex-lg-row gap-2">
        <div class="input-group flex-fill">
            <span class="input-group-text bi bi-regex"></span>
            <InputText class="form-control" placeholder="[Ии]стория.*" @bind-Value="@_regex" @bind-Value:after="@SearchBooks" />
        </div>
        <div class="input-group flex-fill">
            <button class="flex-fill btn btn-@(_isList ? "primary" : "outline-primary")" @onclick="@(() => _isList = true)">
                <i class="bi bi-list-ol"></i>
                <span class="d-none d-lg-inline">Список</span>
            </button>
            <button class="flex-fill btn btn-@(_isList ? "outline-primary" : "primary")" @onclick="@(() => _isList = false)">
                <i class="bi bi-card-text"></i>
                <span class="d-none d-lg-inline">Каталог</span>
            </button>
        </div>
        <AuthorizeView Roles="@RoleNames.Writer">
            <Authorized>
                <a class="btn btn-outline-success" href="wiki/books/new">
                    <i class="bi bi-plus"></i>
                </a>
            </Authorized>
        </AuthorizeView>
    </div>

    @if (_isList)
    {
        <BooksList Books="_books" />
    }
    else
    {
        <BookCards Books="_books" />
    }
</div>


@code {
    private BookModel[]? _books;
    private string? _regex;

    private bool _isList;

    private async Task SearchBooks()
    {
        await Backend.Wiki.SearchBooks(new SearchBooks.Request(_regex))
            .ThenDo(result => _books = result);
        if (BlazorEnv.IsWasm)
        {
            var cache = Services.GetRequiredService<IMemoryCache>();
            cache.Set(nameof(_books), _books);
            cache.Set(nameof(_regex), _regex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Persistence.TryTakeFromJson(nameof(_books), out _books))
        {
            return;
        }

        if (BlazorEnv.IsWasm)
        {
            var cache = Services.GetRequiredService<IMemoryCache>();
            _books = cache.Get<BookModel[]>(nameof(_books));
            _regex = cache.Get<string>(nameof(_regex));
        }

        if (_books?.Any() is not true)
        {
            await SearchBooks();
        }
        if (BlazorEnv.IsServer)
        {
            Persistence.RegisterOnPersisting(() =>
            {
                Persistence.PersistAsJson(nameof(_books), _books);
                return Task.CompletedTask;
            });
        }
    }

}