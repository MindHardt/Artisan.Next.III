@attribute [Route($"/wiki/books/read/{{{nameof(UrlName)}}}")]
@layout WikiLayout
@using Client.Features.Shared
@using Contracts
@using Client.Features.Shared.Components
@using Client.Features.Shared.Toasts
@using ErrorOr
@using Microsoft.Extensions.Caching.Memory
@inject PersistentComponentState Persistence
@inject BackendClient Backend
@inject NavigationManager Navigation
@inject IServiceProvider Services

@if (_book is null)
{
    <PlaceholderText />
}
else
{
    <div class="d-flex flex-column flex-md-row gap-2 mb-2">
        <AuthorizeView Roles="@RoleNames.Admin">
            <Authorized>
                <a href="/wiki/books/edit/@UrlName" class="btn btn-warning w-100">
                    <i class="bi bi-pencil"></i>
                    Редактировать
                </a>
                <button class="btn btn-primary w-100" @onclick="@CopyInviteLink">
                    <i class="bi bi-share-fill"></i>
                    Ссылка-приглашение
                </button>
            </Authorized>
        </AuthorizeView>
        <button class="btn btn-outline-primary w-100" @onclick="@(() => _includeImages = !_includeImages)">
            @{
                var icon = _includeImages
                    ? "eye-fill"
                    : "eye-slash-fill";
            }
            <i class="bi bi-@icon"></i>
            Картинки
        </button>
        <button class="btn btn-outline-secondary w-100" onclick="printJS('book-container', 'html')">
            <i class="bi bi-printer-fill"></i>
            Печатать
        </button>
    </div>
    
    @if (_book.IsPublic is false)
    {
        <AuthorizeView>
            <NotAuthorized>
                <div class="alert alert-warning" role="alert">
                    <p>
                        Если вы авторизуетесь то ваш переход на эту книгу сохранится
                        и она станет вам доступна всегда.
                    </p>
                    <button class="btn btn-primary" @onclick="() => Services.GetRequiredService<ModalJsInterop>().ShowLoginModal()">
                        <i class="bi bi-key"></i>
                        Авторизоваться
                    </button>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    }
    
    var imageUrl = _book.ImageUrl ?? $"{Navigation.BaseUri}/icon-1024.png";
    <OpenGraph Image="@imageUrl" Title="@_book.Name" Description="@_book.Description"/>
    
    @if (_book.ImageUrl is null)
    {
        <div class="d-flex vstack">
            <h1>@_book.Name</h1>
            <h2 class="text-secondary">@_book.Author</h2>
            <div class="flex-fill"></div>
            <h3>@_book.Description</h3>
        </div>
    }
    else
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-8 col-12 d-flex vstack">
                    <h1>@_book.Name</h1>
                    <h2 class="text-secondary">@_book.Author</h2>
                    <div class="flex-fill"></div>
                    <h3>@_book.Description</h3>
                </div>
                <div class="col-md-4 col-12">
                    <img class="w-100 img-thumbnail" src="@_book.ImageUrl" alt="Аватар" />
                </div>
            </div>
        </div>
    }
    <hr/>
    
    @if (BlazorEnv.IsServer)
    {
        <PlaceholderText/>
    }
    else
    {
        <div id="book-container">
            <RenderedMd Markdown="@GetText()"/>
        </div>
    }
}

@code {

    private bool _includeImages = true;
    private GetBook.Response? _book;

    [SupplyParameterFromQuery(Name = nameof(GetBook.Request.InviteKey))]
    public string? InviteKey { get; set; }
    
    [Parameter]
    public string UrlName { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (BlazorEnv.IsServer)
        {
            await Backend.Wiki.GetBook(CreateRequest()).ThenDo(book =>
            {
                _book = book;
                Persistence.RegisterOnPersisting(() =>
                {
                    Persistence.PersistAsJson(nameof(_book), _book);
                    return Task.CompletedTask;
                });
            });
        }
        else
        {
            var cache = Services.GetRequiredService<IMemoryCache>();
            
            if (Persistence.TryTakeFromJson(nameof(_book), out _book) is false && 
                cache.TryGetValue($"book_{UrlName}", out _book) is false)
            {
                await Backend.Wiki.GetBook(CreateRequest())
                    .ThenDo(book => _book = book);
            }

            if (_book?.ImageUrl is not null && _book.Text.Contains(_book.ImageUrl))
            {
                _book = _book with { ImageUrl = null };
            }
                
            cache.Set($"book_{UrlName}", _book, TimeSpan.FromMinutes(30));
        }

        if (_book is null)
        {
            Navigation.NavigateTo(BookErrorPage.Path, replace: true);
        }
    }

    private GetBook.Request CreateRequest() => new(
        BookUrlName.From(UrlName),
        InviteKey is not null
            ? BookInviteKey.From(InviteKey)
            : null);

    private Task CopyInviteLink() =>
        Backend.Wiki.CreateInviteKey(new CreateBookInvite.Request(BookUrlName.From(UrlName))).ThenDoAsync(async key =>
        {
            var inviteLink = Navigation.GetUriWithQueryParameter(nameof(GetBook.Request.InviteKey), key.Value);
            await Services.GetRequiredService<ClipboardJsInterop>().Copy(inviteLink);
            await Services.GetRequiredService<ToastSender>().ShowInfoToast("Ссылка скопирована");
        });

}