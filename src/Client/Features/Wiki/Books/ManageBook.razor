@page "/wiki/books/new"
@using Client.Features.Files
@using Client.Features.Shared
@using Contracts
@using Client.Features.Shared.Components
@using Client.Features.Shared.Toasts
@using ErrorOr
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Caching.Memory
@attribute [Route($"/wiki/books/edit/{{{nameof(UrlName)}}}")]
@attribute [Authorize(Roles = RoleNames.Admin)]
@layout WikiLayout
@inject BackendClient Backend
@inject PersistentComponentState Persistence
@inject IServiceProvider Services

<PageTitle>Редактор книг</PageTitle>
<div class="input-group mb-2">
    <span class="input-group-text bi bi-tag"></span>
    <input type="text" class="form-control" @bind="@_bookName" disabled="@Editing" placeholder="Название"/>
    @{
        var publicButtonClass = _isPublic
            ? "bi-star-fill text-warning"
            : "bi-star";
    }
    <span class="input-group-text bi @publicButtonClass" @onclick="@(() => _isPublic = !_isPublic)"></span>
</div>
<div class="input-group mb-2">
    <span class="input-group-text bi bi-person"></span>
    <input type="text" class="form-control" @bind="@_authorName" placeholder="Автор"/>
</div>
<div class="input-group mb-2">
    <span class="input-group-text bi bi-card-text"></span>
    <input type="text" class="form-control form-control-lg" @bind="@_description" placeholder="Описание"/>
</div>
<div class="input-group mb-2">
    <span class="input-group-text bi bi-image"></span>
    <input type="text" class="form-control" @bind="@_imageUrl" placeholder="URL изображения"/>
    <button class="btn btn-outline-primary rounded-end" onclick="document.getElementById('thumbnailImageUpload').click()">
        <i class="bi bi-upload"></i>
    </button>
    <InputFile hidden id="thumbnailImageUpload" accept="image/*" OnChange="@HandleThumbnailImage"/>
</div>
@if (BlazorEnv.IsServer)
{
    <PlaceholderText />
}
else
{
    <div hidden="@(!_isPreview)">
        <RenderedMd Markdown="@_text" />
    </div>
    
    <div hidden="@_isPreview">
        <textarea class="form-control" id="bookTextArea" @bind="@_text" style="resize: none"></textarea>
    
        <script>
            function adjustHeight() {
                const element = document.getElementById('bookTextArea');
                let scrollTop = window.scrollY;
                
                element.previousHeight = parseInt(element.style.height.replace('px', ''));

                element.style.height = '1px';
                element.style.height = element.scrollHeight + 5 + 'px';
                
                const heightDiff = element.previousHeight - parseInt(element.style.height.replace('px', ''));
                scrollTop -= heightDiff;

                window.scrollTo({
                    top: scrollTop,
                    left: document.body.scrollLeft,
                    behavior: 'instant'
                });
            }
            document.getElementById('bookTextArea').addEventListener('input', () => adjustHeight());
        </script>
    </div>

    <div class="sticky-bottom mt-2 d-flex justify-content-end">
        <div class="card shadow-sm" id="controls">
            <div class="p-1 hstack gap-2">
                <div class="input-group">
                    <button class="btn btn-lg @(!_isPreview ? "btn-dark" : "btn-light")"
                            @onclick="@(() => _isPreview = false)">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-lg @(_isPreview ? "btn-dark" : "btn-light")"
                            @onclick="@(() => _isPreview = true)">
                        <i class="bi bi-body-text"></i>
                    </button>
                </div>
                <div class="btn-group dropup">
                    <button type="button" class="btn btn-light btn-lg dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"></button>
                    <ul class="dropdown-menu">
                        <li>
                            <button class="dropdown-item" onclick="navigator.clipboard.writeText('```\n\n```')">
                                <i class="bi bi-code-slash"></i>
                                Код
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item" onclick="navigator.clipboard.writeText('<details>\n<summary></summary>\n\n</details>')">
                                <i class="bi bi-arrows-expand"></i>
                                Спойлер
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item" onclick="document.getElementById('uploadBookFile').click()">
                                <i class="bi bi-file-earmark-image"></i>
                                Картинка
                            </button>
                            <InputFile hidden id="uploadBookFile" accept="image/*" OnChange="@HandleAttachmentImage"/>
                        </li>
                    </ul>
                </div>
                <button class="btn btn-lg btn-success" @onclick="@SaveBook">
                    <i class="bi bi-floppy"></i>
                </button>
            </div>
        </div>
    </div>
}


@code {

    private GetBook.Response? _book;

    private GetBook.Response? Book
    {
        set => 
            (_book, _text, _authorName, _description, _bookName, _imageUrl, _isPublic) = 
            (value, value!.Text, value.Author, value.Description, value.Name, value.ImageUrl ?? string.Empty, value.IsPublic);
    }

    private string _bookName = string.Empty;
    private string _description = string.Empty;
    private string _authorName = string.Empty;
    private string _text = string.Empty;
    private string _imageUrl = string.Empty;
    private bool _isPublic;

    private bool _isPreview;

    protected override async Task OnInitializedAsync()
    {
        if (UrlName is null)
        {
            return;
        }
        
        if (Persistence.TryTakeFromJson(nameof(_book), out _book))
        {
            Book = _book;
        }
        else
        {
            await Backend.Wiki.GetBook(new GetBook.Request(BookUrlName.From(UrlName)))
                .ThenDo(result => Book = result);
            if (BlazorEnv.IsServer)
            {
                Persistence.RegisterOnPersisting(() =>
                {
                    Persistence.PersistAsJson(nameof(_book), _book);
                    return Task.CompletedTask;
                });
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Services.GetRequiredService<IJSRuntime>().InvokeVoidAsync("adjustHeight");
    }

    private async Task HandleThumbnailImage(InputFileChangeEventArgs e)
    {
        await Backend.Files.UploadFile(new UploadFile.Request<IBrowserFile>(
            e.File,
            FileScope.Attachment))
            .ThenDo(result => _imageUrl = result.Url);
    }

    private async Task HandleAttachmentImage(InputFileChangeEventArgs e)
    {
        await Backend.Files.UploadFile(new UploadFile.Request<IBrowserFile>(e.File, FileScope.Attachment))
            .ThenDoAsync(async result =>
            {
                var alt = Path.GetFileNameWithoutExtension(e.File.Name);
                await Services.GetRequiredService<ClipboardJsInterop>().Copy($"![{alt}]({result.Url} =100%x*)");
                await Services.GetRequiredService<ToastSender>().ShowInfoToast("Ссылка скопирована"); 
            });
    }

    private async Task SaveBook()
    {
        var imageUrl = string.IsNullOrWhiteSpace(_imageUrl)
            ? null
            : _imageUrl;
        if (Editing)
        {
            var request = new UpdateBook.Request(
                BookUrlName.From(UrlName),
                _authorName,
                _description,
                _text,
                imageUrl,
                _isPublic);
            await Backend.Wiki.UpdateBook(request);
        }
        else
        {
            var request = new CreateBook.Request(
                _bookName,
                _description,
                _authorName,
                _text,
                imageUrl,
                _isPublic);
            await Backend.Wiki.CreateBook(request).ThenDo(result =>
            {
                UrlName = result.UrlName.Value;
                Services.GetRequiredService<IMemoryCache>().Remove("_books");
            });
        }
        
        Services.GetRequiredService<IMemoryCache>().Remove($"book_{UrlName}");
        Services.GetRequiredService<NavigationManager>().NavigateTo(
            $"/wiki/books/read/{UrlName}");
    }

    [Parameter]
    public string? UrlName { get; set; }

    public bool Editing => UrlName is not null;
}