@using System.Diagnostics
@using Client.Features.Files
@using Client.Features.Shared
@using Client.Features.Shared.Toasts
@using ErrorOr

@using Contracts
@inject BackendClient Backend
@inject IServiceProvider Services

<div class="input-group">
    <span class="input-group-text bi bi-regex"></span>
    <input class="form-control" type="text" value="@_fileRegex" @onchange="@HandleRegex" placeholder="(.*?)\.jpe?g"/>
    <select class="form-select" @onchange="@SelectScope">
        <option value="" selected>Любой</option>
        @foreach (var scope in Enum.GetValues<FileScope>())
        {
            <option value="@scope">@GetName(scope)</option>
        }
    </select>
    <button class="btn btn-primary rounded-end" @onclick="@SearchFiles">
        <i class="bi bi-search"></i>
    </button>
</div>
<div class="table-responsive">
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">ID</th>
            <th scope="col">Имя</th>
            <th scope="col">Размер</th>
            <th scope="col">Цель</th>
            <th scope="col">Управление</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var row in (_files ?? []).Select((file, index) => (file, index)))
        {
            <tr>
                <th scope="row">@(row.index + 1)</th>
                <td>@row.file.Identifier</td>
                <td class="text-truncate">@row.file.OriginalName</td>
                <td>@row.file.Size.Megabytes.ToString("0.00") МБ</td>
                <td>
                    @{
                        var icon = row.file.Scope switch
                        {
                            FileScope.Avatar => "person-badge",
                            FileScope.Attachment => "paperclip",
                            _ => "question"
                        };
                    }
                    <i class="bi bi-@icon" title="@GetName(row.file.Scope)"></i>
                </td>
                <td>
                    <a class="btn btn-sm btn-outline-primary me-1" href="@row.file.GetUrl(GetFile.Name.Original)">
                        <i class="bi bi-link-45deg"></i>
                    </a>
                    @{
                        var isCurrentAvatar = row.file.Url == _avatarUrl;
                    }
                    @if (isCurrentAvatar)
                    {
                        <button class="btn btn-sm btn-outline-danger" title="Нельзя удалить свой аватар">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteFile(row.file))">
                            <i class="bi bi-trash"></i>
                        </button>
                    }
                </td>
            </tr>
        }
        </tbody>
        @if (_totalFiles is not null && _files is not null)
        {
            <tfoot>
            <td colspan="3">
                Файлов: @_files.Length / @_totalFiles
            </td>
            <td colspan="3">
                Общий размер: @(_usage?.Used.Megabytes.ToString("0.00") ?? "NaN") Мб 
            </td>
            </tfoot>
        }
    </table>
</div>
@if (_usage is not null)
{
    var (percent, color) = GetUsageContext();
    <h3 class="mt-2">Использовано</h3>
    <div class="d-flex">
        <span class="badge text-bg-light me-1">
            @_usage.Used.Megabytes.ToString("0.00") МБ
        </span>
        <div class="progress flex-fill" role="progressbar">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-@color" style="width: @percent%">
                @(percent > 5 ? $"{percent}%" : null)
            </div>
        </div>
        <div class="badge text-bg-light ms-1">
            @_usage.Limit.Megabytes.ToString("0.00") МБ
        </div>
    </div>
}
<AuthorizeView Roles="@RoleNames.Admin">
    <Authorized>
        <div>
            <button class="btn btn-lg btn-success w-100 mt-2" onclick="document.getElementById('AdminFileUpload').click()">
                <i class="bi bi-upload"></i>
                Загрузить файлы
            </button>
            <InputFile OnChange="@HandleAdminFiles" hidden multiple id="AdminFileUpload"/>
        </div>
    </Authorized>
</AuthorizeView>
                
@code {

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    private string? _avatarUrl;
    private string _fileRegex = "";
    private FileScope? _scope;
    private FileModel[]? _files;
    private int? _totalFiles;
    private GetFileUsage.Response? _usage;

    protected override async Task OnInitializedAsync()
    {
        _avatarUrl = (await AuthStateTask).User.GetAvatarUrl();
        await SearchFiles();
        await UpdateUsage();
    }

    private async Task DeleteFile(FileModel file)
    {
        await Backend.Files.DeleteFile(new DeleteFile.Request(file.Identifier)).ThenDoAsync(async _ =>
        {
            await SearchFiles();
            await UpdateUsage();
        });
    }

    private async Task SelectScope(ChangeEventArgs e)
    {
        _scope = e.Value switch
        {
            "" => null,
            string s => Enum.Parse<FileScope>(s),
            _ => throw new UnreachableException()
        };
        await SearchFiles();
    }

    private async Task HandleRegex(ChangeEventArgs e)
    {
        _fileRegex = (string)e.Value!;
        await SearchFiles();
    }

    private async Task SearchFiles()
    {
        await Backend.Files.SearchFiles(new SearchFiles.Request(_fileRegex, _scope))
            .ThenDo(result =>
            {
                _files = result.Files;
                _totalFiles = result.TotalFiles;
            });
    }

    private async Task UpdateUsage()
    {
        await Backend.Files.GetUsage().ThenDo(result => _usage = result);
    }

    private string GetName(FileScope scope) => scope switch
    {
        FileScope.Attachment => "Вложение",
        FileScope.Avatar => "Аватар",
        _ => "Неизвестно"
    };

    private async Task HandleAdminFiles(InputFileChangeEventArgs e)
    {
        var toasts = Services.GetRequiredService<ToastSender>();
        await toasts.ShowInfoToast("Загружаем файлы...");

        foreach (var file in e.GetMultipleFiles(int.MaxValue))
        {
            await Backend.Files.UploadFile(new UploadFile.Request<IBrowserFile>(file, FileScope.Unknown)).SwitchAsync(
                async result =>
                {
                    await SearchFiles();
                    await UpdateUsage();
                    await toasts.ShowInfoToast($"Файл <a href=\"{result.Url}\">{result.GetUrl(GetFile.Name.Original)}</a> загружен!");
                },
                async error =>
                {
                    await toasts.ShowErrorToast($"Произошла ошибка {error.First().Description}");
                });
        }
    }

    private (double percent, string color) GetUsageContext()
    {
        var usagePercent = Math.Round(_usage!.Used.Value * 100d / _usage!.Limit.Value);
        var usageColor = usagePercent < 80
            ? "success"
            : usagePercent < 90
                ? "warning"
                : "danger";
        
        return (usagePercent, usageColor);
    }
}