@inject ShowdownJsInterop Showdown

<div class="container-fluid overflow-auto">
    @if (_html is null)
    {
        <PlaceholderText />
    }
    else
    {
        @_html.Value
    }
</div>

@code {

    private readonly string _id = $"md_{Guid.NewGuid()}";

    [Parameter, EditorRequired]
    public string Markdown { get; set; } = null!;

    /// <summary>
    /// If set to <see langword="false"/>, component displays placeholder while rerendering,
    /// otherwise it changes its content after a delay.
    /// </summary>
    [Parameter]
    public bool SmoothRerender { get; set; } = true;

    private MarkupString? _html;

    protected override void OnParametersSet()
    {
        if (SmoothRerender is false)
        {
            _html = null;
        }
        _ = Task.Run(async () =>
        {
            _html = await Showdown.RenderMd(Markdown);
            await InvokeAsync(StateHasChanged);
        });
    }

}